// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CluserServiceClient is the client API for CluserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CluserServiceClient interface {
	Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
}

type cluserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCluserServiceClient(cc grpc.ClientConnInterface) CluserServiceClient {
	return &cluserServiceClient{cc}
}

func (c *cluserServiceClient) Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/provisioner.CluserService/Cluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CluserServiceServer is the server API for CluserService service.
// All implementations should embed UnimplementedCluserServiceServer
// for forward compatibility
type CluserServiceServer interface {
	Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
}

// UnimplementedCluserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCluserServiceServer struct {
}

func (UnimplementedCluserServiceServer) Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cluster not implemented")
}

// UnsafeCluserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CluserServiceServer will
// result in compilation errors.
type UnsafeCluserServiceServer interface {
	mustEmbedUnimplementedCluserServiceServer()
}

func RegisterCluserServiceServer(s grpc.ServiceRegistrar, srv CluserServiceServer) {
	s.RegisterService(&_CluserService_serviceDesc, srv)
}

func _CluserService_Cluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CluserServiceServer).Cluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provisioner.CluserService/Cluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CluserServiceServer).Cluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CluserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provisioner.CluserService",
	HandlerType: (*CluserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cluster",
			Handler:    _CluserService_Cluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provisioner.proto",
}
